# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_inchiapi', [dirname(__file__)])
        except ImportError:
            import _inchiapi
            return _inchiapi
        if fp is not None:
            try:
                _mod = imp.load_module('_inchiapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _inchiapi = swig_import_helper()
    del swig_import_helper
else:
    import _inchiapi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


FIND_RING_SYSTEMS = _inchiapi.FIND_RING_SYSTEMS
FIND_RINS_SYSTEMS_DISTANCES = _inchiapi.FIND_RINS_SYSTEMS_DISTANCES
INCHI_RADICAL_NONE = _inchiapi.INCHI_RADICAL_NONE
INCHI_RADICAL_SINGLET = _inchiapi.INCHI_RADICAL_SINGLET
INCHI_RADICAL_DOUBLET = _inchiapi.INCHI_RADICAL_DOUBLET
INCHI_RADICAL_TRIPLET = _inchiapi.INCHI_RADICAL_TRIPLET
INCHI_BOND_TYPE_NONE = _inchiapi.INCHI_BOND_TYPE_NONE
INCHI_BOND_TYPE_SINGLE = _inchiapi.INCHI_BOND_TYPE_SINGLE
INCHI_BOND_TYPE_DOUBLE = _inchiapi.INCHI_BOND_TYPE_DOUBLE
INCHI_BOND_TYPE_TRIPLE = _inchiapi.INCHI_BOND_TYPE_TRIPLE
INCHI_BOND_TYPE_ALTERN = _inchiapi.INCHI_BOND_TYPE_ALTERN
INCHI_BOND_STEREO_NONE = _inchiapi.INCHI_BOND_STEREO_NONE
INCHI_BOND_STEREO_SINGLE_1UP = _inchiapi.INCHI_BOND_STEREO_SINGLE_1UP
INCHI_BOND_STEREO_SINGLE_1EITHER = _inchiapi.INCHI_BOND_STEREO_SINGLE_1EITHER
INCHI_BOND_STEREO_SINGLE_1DOWN = _inchiapi.INCHI_BOND_STEREO_SINGLE_1DOWN
INCHI_BOND_STEREO_SINGLE_2UP = _inchiapi.INCHI_BOND_STEREO_SINGLE_2UP
INCHI_BOND_STEREO_SINGLE_2EITHER = _inchiapi.INCHI_BOND_STEREO_SINGLE_2EITHER
INCHI_BOND_STEREO_SINGLE_2DOWN = _inchiapi.INCHI_BOND_STEREO_SINGLE_2DOWN
INCHI_BOND_STEREO_DOUBLE_EITHER = _inchiapi.INCHI_BOND_STEREO_DOUBLE_EITHER
MAXVAL = _inchiapi.MAXVAL
ATOM_EL_LEN = _inchiapi.ATOM_EL_LEN
NUM_H_ISOTOPES = _inchiapi.NUM_H_ISOTOPES
ISOTOPIC_SHIFT_FLAG = _inchiapi.ISOTOPIC_SHIFT_FLAG
ISOTOPIC_SHIFT_MAX = _inchiapi.ISOTOPIC_SHIFT_MAX
class inchi_Atom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inchi_Atom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inchi_Atom, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _inchiapi.inchi_Atom_x_set
    __swig_getmethods__["x"] = _inchiapi.inchi_Atom_x_get
    if _newclass:x = _swig_property(_inchiapi.inchi_Atom_x_get, _inchiapi.inchi_Atom_x_set)
    __swig_setmethods__["y"] = _inchiapi.inchi_Atom_y_set
    __swig_getmethods__["y"] = _inchiapi.inchi_Atom_y_get
    if _newclass:y = _swig_property(_inchiapi.inchi_Atom_y_get, _inchiapi.inchi_Atom_y_set)
    __swig_setmethods__["z"] = _inchiapi.inchi_Atom_z_set
    __swig_getmethods__["z"] = _inchiapi.inchi_Atom_z_get
    if _newclass:z = _swig_property(_inchiapi.inchi_Atom_z_get, _inchiapi.inchi_Atom_z_set)
    __swig_setmethods__["neighbor"] = _inchiapi.inchi_Atom_neighbor_set
    __swig_getmethods__["neighbor"] = _inchiapi.inchi_Atom_neighbor_get
    if _newclass:neighbor = _swig_property(_inchiapi.inchi_Atom_neighbor_get, _inchiapi.inchi_Atom_neighbor_set)
    __swig_setmethods__["bond_type"] = _inchiapi.inchi_Atom_bond_type_set
    __swig_getmethods__["bond_type"] = _inchiapi.inchi_Atom_bond_type_get
    if _newclass:bond_type = _swig_property(_inchiapi.inchi_Atom_bond_type_get, _inchiapi.inchi_Atom_bond_type_set)
    __swig_setmethods__["bond_stereo"] = _inchiapi.inchi_Atom_bond_stereo_set
    __swig_getmethods__["bond_stereo"] = _inchiapi.inchi_Atom_bond_stereo_get
    if _newclass:bond_stereo = _swig_property(_inchiapi.inchi_Atom_bond_stereo_get, _inchiapi.inchi_Atom_bond_stereo_set)
    __swig_setmethods__["elname"] = _inchiapi.inchi_Atom_elname_set
    __swig_getmethods__["elname"] = _inchiapi.inchi_Atom_elname_get
    if _newclass:elname = _swig_property(_inchiapi.inchi_Atom_elname_get, _inchiapi.inchi_Atom_elname_set)
    __swig_setmethods__["num_bonds"] = _inchiapi.inchi_Atom_num_bonds_set
    __swig_getmethods__["num_bonds"] = _inchiapi.inchi_Atom_num_bonds_get
    if _newclass:num_bonds = _swig_property(_inchiapi.inchi_Atom_num_bonds_get, _inchiapi.inchi_Atom_num_bonds_set)
    __swig_setmethods__["num_iso_H"] = _inchiapi.inchi_Atom_num_iso_H_set
    __swig_getmethods__["num_iso_H"] = _inchiapi.inchi_Atom_num_iso_H_get
    if _newclass:num_iso_H = _swig_property(_inchiapi.inchi_Atom_num_iso_H_get, _inchiapi.inchi_Atom_num_iso_H_set)
    __swig_setmethods__["isotopic_mass"] = _inchiapi.inchi_Atom_isotopic_mass_set
    __swig_getmethods__["isotopic_mass"] = _inchiapi.inchi_Atom_isotopic_mass_get
    if _newclass:isotopic_mass = _swig_property(_inchiapi.inchi_Atom_isotopic_mass_get, _inchiapi.inchi_Atom_isotopic_mass_set)
    __swig_setmethods__["radical"] = _inchiapi.inchi_Atom_radical_set
    __swig_getmethods__["radical"] = _inchiapi.inchi_Atom_radical_get
    if _newclass:radical = _swig_property(_inchiapi.inchi_Atom_radical_get, _inchiapi.inchi_Atom_radical_set)
    __swig_setmethods__["charge"] = _inchiapi.inchi_Atom_charge_set
    __swig_getmethods__["charge"] = _inchiapi.inchi_Atom_charge_get
    if _newclass:charge = _swig_property(_inchiapi.inchi_Atom_charge_get, _inchiapi.inchi_Atom_charge_set)
    def __init__(self): 
        this = _inchiapi.new_inchi_Atom()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inchiapi.delete_inchi_Atom
    __del__ = lambda self : None;
inchi_Atom_swigregister = _inchiapi.inchi_Atom_swigregister
inchi_Atom_swigregister(inchi_Atom)

NO_ATOM = _inchiapi.NO_ATOM
INCHI_StereoType_None = _inchiapi.INCHI_StereoType_None
INCHI_StereoType_DoubleBond = _inchiapi.INCHI_StereoType_DoubleBond
INCHI_StereoType_Tetrahedral = _inchiapi.INCHI_StereoType_Tetrahedral
INCHI_StereoType_Allene = _inchiapi.INCHI_StereoType_Allene
INCHI_PARITY_NONE = _inchiapi.INCHI_PARITY_NONE
INCHI_PARITY_ODD = _inchiapi.INCHI_PARITY_ODD
INCHI_PARITY_EVEN = _inchiapi.INCHI_PARITY_EVEN
INCHI_PARITY_UNKNOWN = _inchiapi.INCHI_PARITY_UNKNOWN
INCHI_PARITY_UNDEFINED = _inchiapi.INCHI_PARITY_UNDEFINED
class inchi_Stereo0D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inchi_Stereo0D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inchi_Stereo0D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["neighbor"] = _inchiapi.inchi_Stereo0D_neighbor_set
    __swig_getmethods__["neighbor"] = _inchiapi.inchi_Stereo0D_neighbor_get
    if _newclass:neighbor = _swig_property(_inchiapi.inchi_Stereo0D_neighbor_get, _inchiapi.inchi_Stereo0D_neighbor_set)
    __swig_setmethods__["central_atom"] = _inchiapi.inchi_Stereo0D_central_atom_set
    __swig_getmethods__["central_atom"] = _inchiapi.inchi_Stereo0D_central_atom_get
    if _newclass:central_atom = _swig_property(_inchiapi.inchi_Stereo0D_central_atom_get, _inchiapi.inchi_Stereo0D_central_atom_set)
    __swig_setmethods__["type"] = _inchiapi.inchi_Stereo0D_type_set
    __swig_getmethods__["type"] = _inchiapi.inchi_Stereo0D_type_get
    if _newclass:type = _swig_property(_inchiapi.inchi_Stereo0D_type_get, _inchiapi.inchi_Stereo0D_type_set)
    __swig_setmethods__["parity"] = _inchiapi.inchi_Stereo0D_parity_set
    __swig_getmethods__["parity"] = _inchiapi.inchi_Stereo0D_parity_get
    if _newclass:parity = _swig_property(_inchiapi.inchi_Stereo0D_parity_get, _inchiapi.inchi_Stereo0D_parity_set)
    def __init__(self): 
        this = _inchiapi.new_inchi_Stereo0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inchiapi.delete_inchi_Stereo0D
    __del__ = lambda self : None;
inchi_Stereo0D_swigregister = _inchiapi.inchi_Stereo0D_swigregister
inchi_Stereo0D_swigregister(inchi_Stereo0D)

class inchi_Input(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inchi_Input, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inchi_Input, name)
    __repr__ = _swig_repr
    __swig_setmethods__["atom"] = _inchiapi.inchi_Input_atom_set
    __swig_getmethods__["atom"] = _inchiapi.inchi_Input_atom_get
    if _newclass:atom = _swig_property(_inchiapi.inchi_Input_atom_get, _inchiapi.inchi_Input_atom_set)
    __swig_setmethods__["stereo0D"] = _inchiapi.inchi_Input_stereo0D_set
    __swig_getmethods__["stereo0D"] = _inchiapi.inchi_Input_stereo0D_get
    if _newclass:stereo0D = _swig_property(_inchiapi.inchi_Input_stereo0D_get, _inchiapi.inchi_Input_stereo0D_set)
    __swig_setmethods__["szOptions"] = _inchiapi.inchi_Input_szOptions_set
    __swig_getmethods__["szOptions"] = _inchiapi.inchi_Input_szOptions_get
    if _newclass:szOptions = _swig_property(_inchiapi.inchi_Input_szOptions_get, _inchiapi.inchi_Input_szOptions_set)
    __swig_setmethods__["num_atoms"] = _inchiapi.inchi_Input_num_atoms_set
    __swig_getmethods__["num_atoms"] = _inchiapi.inchi_Input_num_atoms_get
    if _newclass:num_atoms = _swig_property(_inchiapi.inchi_Input_num_atoms_get, _inchiapi.inchi_Input_num_atoms_set)
    __swig_setmethods__["num_stereo0D"] = _inchiapi.inchi_Input_num_stereo0D_set
    __swig_getmethods__["num_stereo0D"] = _inchiapi.inchi_Input_num_stereo0D_get
    if _newclass:num_stereo0D = _swig_property(_inchiapi.inchi_Input_num_stereo0D_get, _inchiapi.inchi_Input_num_stereo0D_set)
    def __init__(self): 
        this = _inchiapi.new_inchi_Input()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inchiapi.delete_inchi_Input
    __del__ = lambda self : None;
inchi_Input_swigregister = _inchiapi.inchi_Input_swigregister
inchi_Input_swigregister(inchi_Input)

class inchi_InputINCHI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inchi_InputINCHI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inchi_InputINCHI, name)
    __repr__ = _swig_repr
    __swig_setmethods__["szInChI"] = _inchiapi.inchi_InputINCHI_szInChI_set
    __swig_getmethods__["szInChI"] = _inchiapi.inchi_InputINCHI_szInChI_get
    if _newclass:szInChI = _swig_property(_inchiapi.inchi_InputINCHI_szInChI_get, _inchiapi.inchi_InputINCHI_szInChI_set)
    __swig_setmethods__["szOptions"] = _inchiapi.inchi_InputINCHI_szOptions_set
    __swig_getmethods__["szOptions"] = _inchiapi.inchi_InputINCHI_szOptions_get
    if _newclass:szOptions = _swig_property(_inchiapi.inchi_InputINCHI_szOptions_get, _inchiapi.inchi_InputINCHI_szOptions_set)
    def __init__(self): 
        this = _inchiapi.new_inchi_InputINCHI()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inchiapi.delete_inchi_InputINCHI
    __del__ = lambda self : None;
inchi_InputINCHI_swigregister = _inchiapi.inchi_InputINCHI_swigregister
inchi_InputINCHI_swigregister(inchi_InputINCHI)

class inchi_Output(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inchi_Output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inchi_Output, name)
    __repr__ = _swig_repr
    __swig_setmethods__["szInChI"] = _inchiapi.inchi_Output_szInChI_set
    __swig_getmethods__["szInChI"] = _inchiapi.inchi_Output_szInChI_get
    if _newclass:szInChI = _swig_property(_inchiapi.inchi_Output_szInChI_get, _inchiapi.inchi_Output_szInChI_set)
    __swig_setmethods__["szAuxInfo"] = _inchiapi.inchi_Output_szAuxInfo_set
    __swig_getmethods__["szAuxInfo"] = _inchiapi.inchi_Output_szAuxInfo_get
    if _newclass:szAuxInfo = _swig_property(_inchiapi.inchi_Output_szAuxInfo_get, _inchiapi.inchi_Output_szAuxInfo_set)
    __swig_setmethods__["szMessage"] = _inchiapi.inchi_Output_szMessage_set
    __swig_getmethods__["szMessage"] = _inchiapi.inchi_Output_szMessage_get
    if _newclass:szMessage = _swig_property(_inchiapi.inchi_Output_szMessage_get, _inchiapi.inchi_Output_szMessage_set)
    __swig_setmethods__["szLog"] = _inchiapi.inchi_Output_szLog_set
    __swig_getmethods__["szLog"] = _inchiapi.inchi_Output_szLog_get
    if _newclass:szLog = _swig_property(_inchiapi.inchi_Output_szLog_get, _inchiapi.inchi_Output_szLog_set)
    def __init__(self): 
        this = _inchiapi.new_inchi_Output()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inchiapi.delete_inchi_Output
    __del__ = lambda self : None;
inchi_Output_swigregister = _inchiapi.inchi_Output_swigregister
inchi_Output_swigregister(inchi_Output)

class inchi_OutputStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inchi_OutputStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inchi_OutputStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["atom"] = _inchiapi.inchi_OutputStruct_atom_set
    __swig_getmethods__["atom"] = _inchiapi.inchi_OutputStruct_atom_get
    if _newclass:atom = _swig_property(_inchiapi.inchi_OutputStruct_atom_get, _inchiapi.inchi_OutputStruct_atom_set)
    __swig_setmethods__["stereo0D"] = _inchiapi.inchi_OutputStruct_stereo0D_set
    __swig_getmethods__["stereo0D"] = _inchiapi.inchi_OutputStruct_stereo0D_get
    if _newclass:stereo0D = _swig_property(_inchiapi.inchi_OutputStruct_stereo0D_get, _inchiapi.inchi_OutputStruct_stereo0D_set)
    __swig_setmethods__["num_atoms"] = _inchiapi.inchi_OutputStruct_num_atoms_set
    __swig_getmethods__["num_atoms"] = _inchiapi.inchi_OutputStruct_num_atoms_get
    if _newclass:num_atoms = _swig_property(_inchiapi.inchi_OutputStruct_num_atoms_get, _inchiapi.inchi_OutputStruct_num_atoms_set)
    __swig_setmethods__["num_stereo0D"] = _inchiapi.inchi_OutputStruct_num_stereo0D_set
    __swig_getmethods__["num_stereo0D"] = _inchiapi.inchi_OutputStruct_num_stereo0D_get
    if _newclass:num_stereo0D = _swig_property(_inchiapi.inchi_OutputStruct_num_stereo0D_get, _inchiapi.inchi_OutputStruct_num_stereo0D_set)
    __swig_setmethods__["szMessage"] = _inchiapi.inchi_OutputStruct_szMessage_set
    __swig_getmethods__["szMessage"] = _inchiapi.inchi_OutputStruct_szMessage_get
    if _newclass:szMessage = _swig_property(_inchiapi.inchi_OutputStruct_szMessage_get, _inchiapi.inchi_OutputStruct_szMessage_set)
    __swig_setmethods__["szLog"] = _inchiapi.inchi_OutputStruct_szLog_set
    __swig_getmethods__["szLog"] = _inchiapi.inchi_OutputStruct_szLog_get
    if _newclass:szLog = _swig_property(_inchiapi.inchi_OutputStruct_szLog_get, _inchiapi.inchi_OutputStruct_szLog_set)
    __swig_setmethods__["WarningFlags"] = _inchiapi.inchi_OutputStruct_WarningFlags_set
    __swig_getmethods__["WarningFlags"] = _inchiapi.inchi_OutputStruct_WarningFlags_get
    if _newclass:WarningFlags = _swig_property(_inchiapi.inchi_OutputStruct_WarningFlags_get, _inchiapi.inchi_OutputStruct_WarningFlags_set)
    def __init__(self): 
        this = _inchiapi.new_inchi_OutputStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inchiapi.delete_inchi_OutputStruct
    __del__ = lambda self : None;
inchi_OutputStruct_swigregister = _inchiapi.inchi_OutputStruct_swigregister
inchi_OutputStruct_swigregister(inchi_OutputStruct)

inchi_Ret_SKIP = _inchiapi.inchi_Ret_SKIP
inchi_Ret_EOF = _inchiapi.inchi_Ret_EOF
inchi_Ret_OKAY = _inchiapi.inchi_Ret_OKAY
inchi_Ret_WARNING = _inchiapi.inchi_Ret_WARNING
inchi_Ret_ERROR = _inchiapi.inchi_Ret_ERROR
inchi_Ret_FATAL = _inchiapi.inchi_Ret_FATAL
inchi_Ret_UNKNOWN = _inchiapi.inchi_Ret_UNKNOWN
inchi_Ret_BUSY = _inchiapi.inchi_Ret_BUSY
INCHI_VALID_STANDARD = _inchiapi.INCHI_VALID_STANDARD
INCHI_VALID_NON_STANDARD = _inchiapi.INCHI_VALID_NON_STANDARD
INCHI_INVALID_PREFIX = _inchiapi.INCHI_INVALID_PREFIX
INCHI_INVALID_VERSION = _inchiapi.INCHI_INVALID_VERSION
INCHI_INVALID_LAYOUT = _inchiapi.INCHI_INVALID_LAYOUT
INCHI_FAIL_I2I = _inchiapi.INCHI_FAIL_I2I
INCHI_STRING_PREFIX = _inchiapi.INCHI_STRING_PREFIX
LEN_INCHI_STRING_PREFIX = _inchiapi.LEN_INCHI_STRING_PREFIX

def GetINCHI(*args):
  return _inchiapi.GetINCHI(*args)
GetINCHI = _inchiapi.GetINCHI

def GetStdINCHI(*args):
  return _inchiapi.GetStdINCHI(*args)
GetStdINCHI = _inchiapi.GetStdINCHI

def FreeINCHI(*args):
  return _inchiapi.FreeINCHI(*args)
FreeINCHI = _inchiapi.FreeINCHI

def FreeStdINCHI(*args):
  return _inchiapi.FreeStdINCHI(*args)
FreeStdINCHI = _inchiapi.FreeStdINCHI

def GetStringLength(*args):
  return _inchiapi.GetStringLength(*args)
GetStringLength = _inchiapi.GetStringLength

def GetStructFromINCHI(*args):
  return _inchiapi.GetStructFromINCHI(*args)
GetStructFromINCHI = _inchiapi.GetStructFromINCHI

def GetStructFromStdINCHI(*args):
  return _inchiapi.GetStructFromStdINCHI(*args)
GetStructFromStdINCHI = _inchiapi.GetStructFromStdINCHI

def FreeStructFromINCHI(*args):
  return _inchiapi.FreeStructFromINCHI(*args)
FreeStructFromINCHI = _inchiapi.FreeStructFromINCHI

def FreeStructFromStdINCHI(*args):
  return _inchiapi.FreeStructFromStdINCHI(*args)
FreeStructFromStdINCHI = _inchiapi.FreeStructFromStdINCHI

def GetINCHIfromINCHI(*args):
  return _inchiapi.GetINCHIfromINCHI(*args)
GetINCHIfromINCHI = _inchiapi.GetINCHIfromINCHI
STR_ERR_LEN = _inchiapi.STR_ERR_LEN
class InchiInpData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InchiInpData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InchiInpData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pInp"] = _inchiapi.InchiInpData_pInp_set
    __swig_getmethods__["pInp"] = _inchiapi.InchiInpData_pInp_get
    if _newclass:pInp = _swig_property(_inchiapi.InchiInpData_pInp_get, _inchiapi.InchiInpData_pInp_set)
    __swig_setmethods__["bChiral"] = _inchiapi.InchiInpData_bChiral_set
    __swig_getmethods__["bChiral"] = _inchiapi.InchiInpData_bChiral_get
    if _newclass:bChiral = _swig_property(_inchiapi.InchiInpData_bChiral_get, _inchiapi.InchiInpData_bChiral_set)
    __swig_setmethods__["szErrMsg"] = _inchiapi.InchiInpData_szErrMsg_set
    __swig_getmethods__["szErrMsg"] = _inchiapi.InchiInpData_szErrMsg_get
    if _newclass:szErrMsg = _swig_property(_inchiapi.InchiInpData_szErrMsg_get, _inchiapi.InchiInpData_szErrMsg_set)
    def __init__(self): 
        this = _inchiapi.new_InchiInpData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inchiapi.delete_InchiInpData
    __del__ = lambda self : None;
InchiInpData_swigregister = _inchiapi.InchiInpData_swigregister
InchiInpData_swigregister(InchiInpData)


def Get_inchi_Input_FromAuxInfo(*args):
  return _inchiapi.Get_inchi_Input_FromAuxInfo(*args)
Get_inchi_Input_FromAuxInfo = _inchiapi.Get_inchi_Input_FromAuxInfo

def Get_std_inchi_Input_FromAuxInfo(*args):
  return _inchiapi.Get_std_inchi_Input_FromAuxInfo(*args)
Get_std_inchi_Input_FromAuxInfo = _inchiapi.Get_std_inchi_Input_FromAuxInfo

def Free_inchi_Input(*args):
  return _inchiapi.Free_inchi_Input(*args)
Free_inchi_Input = _inchiapi.Free_inchi_Input

def Free_std_inchi_Input(*args):
  return _inchiapi.Free_std_inchi_Input(*args)
Free_std_inchi_Input = _inchiapi.Free_std_inchi_Input

def CheckINCHI(*args):
  return _inchiapi.CheckINCHI(*args)
CheckINCHI = _inchiapi.CheckINCHI
INCHIKEY_OK = _inchiapi.INCHIKEY_OK
INCHIKEY_UNKNOWN_ERROR = _inchiapi.INCHIKEY_UNKNOWN_ERROR
INCHIKEY_EMPTY_INPUT = _inchiapi.INCHIKEY_EMPTY_INPUT
INCHIKEY_INVALID_INCHI_PREFIX = _inchiapi.INCHIKEY_INVALID_INCHI_PREFIX
INCHIKEY_NOT_ENOUGH_MEMORY = _inchiapi.INCHIKEY_NOT_ENOUGH_MEMORY
INCHIKEY_INVALID_INCHI = _inchiapi.INCHIKEY_INVALID_INCHI
INCHIKEY_INVALID_STD_INCHI = _inchiapi.INCHIKEY_INVALID_STD_INCHI
INCHIKEY_VALID_STANDARD = _inchiapi.INCHIKEY_VALID_STANDARD
INCHIKEY_VALID_NON_STANDARD = _inchiapi.INCHIKEY_VALID_NON_STANDARD
INCHIKEY_INVALID_LENGTH = _inchiapi.INCHIKEY_INVALID_LENGTH
INCHIKEY_INVALID_LAYOUT = _inchiapi.INCHIKEY_INVALID_LAYOUT
INCHIKEY_INVALID_VERSION = _inchiapi.INCHIKEY_INVALID_VERSION

def GetINCHIKeyFromINCHI(*args):
  return _inchiapi.GetINCHIKeyFromINCHI(*args)
GetINCHIKeyFromINCHI = _inchiapi.GetINCHIKeyFromINCHI

def GetStdINCHIKeyFromStdINCHI(*args):
  return _inchiapi.GetStdINCHIKeyFromStdINCHI(*args)
GetStdINCHIKeyFromStdINCHI = _inchiapi.GetStdINCHIKeyFromStdINCHI

def CheckINCHIKey(*args):
  return _inchiapi.CheckINCHIKey(*args)
CheckINCHIKey = _inchiapi.CheckINCHIKey
MAX_NUM_STEREO_ATOM_NEIGH = _inchiapi.MAX_NUM_STEREO_ATOM_NEIGH
MAX_NUM_STEREO_BONDS = _inchiapi.MAX_NUM_STEREO_BONDS
INCHI_NUM = _inchiapi.INCHI_NUM
class NORM_ATOM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NORM_ATOM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NORM_ATOM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["elname"] = _inchiapi.NORM_ATOM_elname_set
    __swig_getmethods__["elname"] = _inchiapi.NORM_ATOM_elname_get
    if _newclass:elname = _swig_property(_inchiapi.NORM_ATOM_elname_get, _inchiapi.NORM_ATOM_elname_set)
    __swig_setmethods__["el_number"] = _inchiapi.NORM_ATOM_el_number_set
    __swig_getmethods__["el_number"] = _inchiapi.NORM_ATOM_el_number_get
    if _newclass:el_number = _swig_property(_inchiapi.NORM_ATOM_el_number_get, _inchiapi.NORM_ATOM_el_number_set)
    __swig_setmethods__["neighbor"] = _inchiapi.NORM_ATOM_neighbor_set
    __swig_getmethods__["neighbor"] = _inchiapi.NORM_ATOM_neighbor_get
    if _newclass:neighbor = _swig_property(_inchiapi.NORM_ATOM_neighbor_get, _inchiapi.NORM_ATOM_neighbor_set)
    __swig_setmethods__["orig_at_number"] = _inchiapi.NORM_ATOM_orig_at_number_set
    __swig_getmethods__["orig_at_number"] = _inchiapi.NORM_ATOM_orig_at_number_get
    if _newclass:orig_at_number = _swig_property(_inchiapi.NORM_ATOM_orig_at_number_get, _inchiapi.NORM_ATOM_orig_at_number_set)
    __swig_setmethods__["orig_compt_at_numb"] = _inchiapi.NORM_ATOM_orig_compt_at_numb_set
    __swig_getmethods__["orig_compt_at_numb"] = _inchiapi.NORM_ATOM_orig_compt_at_numb_get
    if _newclass:orig_compt_at_numb = _swig_property(_inchiapi.NORM_ATOM_orig_compt_at_numb_get, _inchiapi.NORM_ATOM_orig_compt_at_numb_set)
    __swig_setmethods__["bond_stereo"] = _inchiapi.NORM_ATOM_bond_stereo_set
    __swig_getmethods__["bond_stereo"] = _inchiapi.NORM_ATOM_bond_stereo_get
    if _newclass:bond_stereo = _swig_property(_inchiapi.NORM_ATOM_bond_stereo_get, _inchiapi.NORM_ATOM_bond_stereo_set)
    __swig_setmethods__["bond_type"] = _inchiapi.NORM_ATOM_bond_type_set
    __swig_getmethods__["bond_type"] = _inchiapi.NORM_ATOM_bond_type_get
    if _newclass:bond_type = _swig_property(_inchiapi.NORM_ATOM_bond_type_get, _inchiapi.NORM_ATOM_bond_type_set)
    __swig_setmethods__["valence"] = _inchiapi.NORM_ATOM_valence_set
    __swig_getmethods__["valence"] = _inchiapi.NORM_ATOM_valence_get
    if _newclass:valence = _swig_property(_inchiapi.NORM_ATOM_valence_get, _inchiapi.NORM_ATOM_valence_set)
    __swig_setmethods__["chem_bonds_valence"] = _inchiapi.NORM_ATOM_chem_bonds_valence_set
    __swig_getmethods__["chem_bonds_valence"] = _inchiapi.NORM_ATOM_chem_bonds_valence_get
    if _newclass:chem_bonds_valence = _swig_property(_inchiapi.NORM_ATOM_chem_bonds_valence_get, _inchiapi.NORM_ATOM_chem_bonds_valence_set)
    __swig_setmethods__["num_H"] = _inchiapi.NORM_ATOM_num_H_set
    __swig_getmethods__["num_H"] = _inchiapi.NORM_ATOM_num_H_get
    if _newclass:num_H = _swig_property(_inchiapi.NORM_ATOM_num_H_get, _inchiapi.NORM_ATOM_num_H_set)
    __swig_setmethods__["num_iso_H"] = _inchiapi.NORM_ATOM_num_iso_H_set
    __swig_getmethods__["num_iso_H"] = _inchiapi.NORM_ATOM_num_iso_H_get
    if _newclass:num_iso_H = _swig_property(_inchiapi.NORM_ATOM_num_iso_H_get, _inchiapi.NORM_ATOM_num_iso_H_set)
    __swig_setmethods__["iso_atw_diff"] = _inchiapi.NORM_ATOM_iso_atw_diff_set
    __swig_getmethods__["iso_atw_diff"] = _inchiapi.NORM_ATOM_iso_atw_diff_get
    if _newclass:iso_atw_diff = _swig_property(_inchiapi.NORM_ATOM_iso_atw_diff_get, _inchiapi.NORM_ATOM_iso_atw_diff_set)
    __swig_setmethods__["charge"] = _inchiapi.NORM_ATOM_charge_set
    __swig_getmethods__["charge"] = _inchiapi.NORM_ATOM_charge_get
    if _newclass:charge = _swig_property(_inchiapi.NORM_ATOM_charge_get, _inchiapi.NORM_ATOM_charge_set)
    __swig_setmethods__["radical"] = _inchiapi.NORM_ATOM_radical_set
    __swig_getmethods__["radical"] = _inchiapi.NORM_ATOM_radical_get
    if _newclass:radical = _swig_property(_inchiapi.NORM_ATOM_radical_get, _inchiapi.NORM_ATOM_radical_set)
    __swig_setmethods__["bAmbiguousStereo"] = _inchiapi.NORM_ATOM_bAmbiguousStereo_set
    __swig_getmethods__["bAmbiguousStereo"] = _inchiapi.NORM_ATOM_bAmbiguousStereo_get
    if _newclass:bAmbiguousStereo = _swig_property(_inchiapi.NORM_ATOM_bAmbiguousStereo_get, _inchiapi.NORM_ATOM_bAmbiguousStereo_set)
    __swig_setmethods__["cFlags"] = _inchiapi.NORM_ATOM_cFlags_set
    __swig_getmethods__["cFlags"] = _inchiapi.NORM_ATOM_cFlags_get
    if _newclass:cFlags = _swig_property(_inchiapi.NORM_ATOM_cFlags_get, _inchiapi.NORM_ATOM_cFlags_set)
    __swig_setmethods__["at_type"] = _inchiapi.NORM_ATOM_at_type_set
    __swig_getmethods__["at_type"] = _inchiapi.NORM_ATOM_at_type_get
    if _newclass:at_type = _swig_property(_inchiapi.NORM_ATOM_at_type_get, _inchiapi.NORM_ATOM_at_type_set)
    __swig_setmethods__["component"] = _inchiapi.NORM_ATOM_component_set
    __swig_getmethods__["component"] = _inchiapi.NORM_ATOM_component_get
    if _newclass:component = _swig_property(_inchiapi.NORM_ATOM_component_get, _inchiapi.NORM_ATOM_component_set)
    __swig_setmethods__["endpoint"] = _inchiapi.NORM_ATOM_endpoint_set
    __swig_getmethods__["endpoint"] = _inchiapi.NORM_ATOM_endpoint_get
    if _newclass:endpoint = _swig_property(_inchiapi.NORM_ATOM_endpoint_get, _inchiapi.NORM_ATOM_endpoint_set)
    __swig_setmethods__["c_point"] = _inchiapi.NORM_ATOM_c_point_set
    __swig_getmethods__["c_point"] = _inchiapi.NORM_ATOM_c_point_get
    if _newclass:c_point = _swig_property(_inchiapi.NORM_ATOM_c_point_get, _inchiapi.NORM_ATOM_c_point_set)
    __swig_setmethods__["x"] = _inchiapi.NORM_ATOM_x_set
    __swig_getmethods__["x"] = _inchiapi.NORM_ATOM_x_get
    if _newclass:x = _swig_property(_inchiapi.NORM_ATOM_x_get, _inchiapi.NORM_ATOM_x_set)
    __swig_setmethods__["y"] = _inchiapi.NORM_ATOM_y_set
    __swig_getmethods__["y"] = _inchiapi.NORM_ATOM_y_get
    if _newclass:y = _swig_property(_inchiapi.NORM_ATOM_y_get, _inchiapi.NORM_ATOM_y_set)
    __swig_setmethods__["z"] = _inchiapi.NORM_ATOM_z_set
    __swig_getmethods__["z"] = _inchiapi.NORM_ATOM_z_get
    if _newclass:z = _swig_property(_inchiapi.NORM_ATOM_z_get, _inchiapi.NORM_ATOM_z_set)
    __swig_setmethods__["bUsed0DParity"] = _inchiapi.NORM_ATOM_bUsed0DParity_set
    __swig_getmethods__["bUsed0DParity"] = _inchiapi.NORM_ATOM_bUsed0DParity_get
    if _newclass:bUsed0DParity = _swig_property(_inchiapi.NORM_ATOM_bUsed0DParity_get, _inchiapi.NORM_ATOM_bUsed0DParity_set)
    __swig_setmethods__["p_parity"] = _inchiapi.NORM_ATOM_p_parity_set
    __swig_getmethods__["p_parity"] = _inchiapi.NORM_ATOM_p_parity_get
    if _newclass:p_parity = _swig_property(_inchiapi.NORM_ATOM_p_parity_get, _inchiapi.NORM_ATOM_p_parity_set)
    __swig_setmethods__["p_orig_at_num"] = _inchiapi.NORM_ATOM_p_orig_at_num_set
    __swig_getmethods__["p_orig_at_num"] = _inchiapi.NORM_ATOM_p_orig_at_num_get
    if _newclass:p_orig_at_num = _swig_property(_inchiapi.NORM_ATOM_p_orig_at_num_get, _inchiapi.NORM_ATOM_p_orig_at_num_set)
    __swig_setmethods__["sb_ord"] = _inchiapi.NORM_ATOM_sb_ord_set
    __swig_getmethods__["sb_ord"] = _inchiapi.NORM_ATOM_sb_ord_get
    if _newclass:sb_ord = _swig_property(_inchiapi.NORM_ATOM_sb_ord_get, _inchiapi.NORM_ATOM_sb_ord_set)
    __swig_setmethods__["sn_ord"] = _inchiapi.NORM_ATOM_sn_ord_set
    __swig_getmethods__["sn_ord"] = _inchiapi.NORM_ATOM_sn_ord_get
    if _newclass:sn_ord = _swig_property(_inchiapi.NORM_ATOM_sn_ord_get, _inchiapi.NORM_ATOM_sn_ord_set)
    __swig_setmethods__["sb_parity"] = _inchiapi.NORM_ATOM_sb_parity_set
    __swig_getmethods__["sb_parity"] = _inchiapi.NORM_ATOM_sb_parity_get
    if _newclass:sb_parity = _swig_property(_inchiapi.NORM_ATOM_sb_parity_get, _inchiapi.NORM_ATOM_sb_parity_set)
    __swig_setmethods__["sn_orig_at_num"] = _inchiapi.NORM_ATOM_sn_orig_at_num_set
    __swig_getmethods__["sn_orig_at_num"] = _inchiapi.NORM_ATOM_sn_orig_at_num_get
    if _newclass:sn_orig_at_num = _swig_property(_inchiapi.NORM_ATOM_sn_orig_at_num_get, _inchiapi.NORM_ATOM_sn_orig_at_num_set)
    __swig_setmethods__["bCutVertex"] = _inchiapi.NORM_ATOM_bCutVertex_set
    __swig_getmethods__["bCutVertex"] = _inchiapi.NORM_ATOM_bCutVertex_get
    if _newclass:bCutVertex = _swig_property(_inchiapi.NORM_ATOM_bCutVertex_get, _inchiapi.NORM_ATOM_bCutVertex_set)
    __swig_setmethods__["nRingSystem"] = _inchiapi.NORM_ATOM_nRingSystem_set
    __swig_getmethods__["nRingSystem"] = _inchiapi.NORM_ATOM_nRingSystem_get
    if _newclass:nRingSystem = _swig_property(_inchiapi.NORM_ATOM_nRingSystem_get, _inchiapi.NORM_ATOM_nRingSystem_set)
    __swig_setmethods__["nNumAtInRingSystem"] = _inchiapi.NORM_ATOM_nNumAtInRingSystem_set
    __swig_getmethods__["nNumAtInRingSystem"] = _inchiapi.NORM_ATOM_nNumAtInRingSystem_get
    if _newclass:nNumAtInRingSystem = _swig_property(_inchiapi.NORM_ATOM_nNumAtInRingSystem_get, _inchiapi.NORM_ATOM_nNumAtInRingSystem_set)
    __swig_setmethods__["nBlockSystem"] = _inchiapi.NORM_ATOM_nBlockSystem_set
    __swig_getmethods__["nBlockSystem"] = _inchiapi.NORM_ATOM_nBlockSystem_get
    if _newclass:nBlockSystem = _swig_property(_inchiapi.NORM_ATOM_nBlockSystem_get, _inchiapi.NORM_ATOM_nBlockSystem_set)
    def __init__(self): 
        this = _inchiapi.new_NORM_ATOM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inchiapi.delete_NORM_ATOM
    __del__ = lambda self : None;
NORM_ATOM_swigregister = _inchiapi.NORM_ATOM_swigregister
NORM_ATOM_swigregister(NORM_ATOM)

class NORM_ATOMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NORM_ATOMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NORM_ATOMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["at"] = _inchiapi.NORM_ATOMS_at_set
    __swig_getmethods__["at"] = _inchiapi.NORM_ATOMS_at_get
    if _newclass:at = _swig_property(_inchiapi.NORM_ATOMS_at_get, _inchiapi.NORM_ATOMS_at_set)
    __swig_setmethods__["at_fixed_bonds"] = _inchiapi.NORM_ATOMS_at_fixed_bonds_set
    __swig_getmethods__["at_fixed_bonds"] = _inchiapi.NORM_ATOMS_at_fixed_bonds_get
    if _newclass:at_fixed_bonds = _swig_property(_inchiapi.NORM_ATOMS_at_fixed_bonds_get, _inchiapi.NORM_ATOMS_at_fixed_bonds_set)
    __swig_setmethods__["num_at"] = _inchiapi.NORM_ATOMS_num_at_set
    __swig_getmethods__["num_at"] = _inchiapi.NORM_ATOMS_num_at_get
    if _newclass:num_at = _swig_property(_inchiapi.NORM_ATOMS_num_at_get, _inchiapi.NORM_ATOMS_num_at_set)
    __swig_setmethods__["num_removed_H"] = _inchiapi.NORM_ATOMS_num_removed_H_set
    __swig_getmethods__["num_removed_H"] = _inchiapi.NORM_ATOMS_num_removed_H_get
    if _newclass:num_removed_H = _swig_property(_inchiapi.NORM_ATOMS_num_removed_H_get, _inchiapi.NORM_ATOMS_num_removed_H_set)
    __swig_setmethods__["num_bonds"] = _inchiapi.NORM_ATOMS_num_bonds_set
    __swig_getmethods__["num_bonds"] = _inchiapi.NORM_ATOMS_num_bonds_get
    if _newclass:num_bonds = _swig_property(_inchiapi.NORM_ATOMS_num_bonds_get, _inchiapi.NORM_ATOMS_num_bonds_set)
    __swig_setmethods__["num_isotopic"] = _inchiapi.NORM_ATOMS_num_isotopic_set
    __swig_getmethods__["num_isotopic"] = _inchiapi.NORM_ATOMS_num_isotopic_get
    if _newclass:num_isotopic = _swig_property(_inchiapi.NORM_ATOMS_num_isotopic_get, _inchiapi.NORM_ATOMS_num_isotopic_set)
    __swig_setmethods__["bExists"] = _inchiapi.NORM_ATOMS_bExists_set
    __swig_getmethods__["bExists"] = _inchiapi.NORM_ATOMS_bExists_get
    if _newclass:bExists = _swig_property(_inchiapi.NORM_ATOMS_bExists_get, _inchiapi.NORM_ATOMS_bExists_set)
    __swig_setmethods__["bDeleted"] = _inchiapi.NORM_ATOMS_bDeleted_set
    __swig_getmethods__["bDeleted"] = _inchiapi.NORM_ATOMS_bDeleted_get
    if _newclass:bDeleted = _swig_property(_inchiapi.NORM_ATOMS_bDeleted_get, _inchiapi.NORM_ATOMS_bDeleted_set)
    __swig_setmethods__["bHasIsotopicLayer"] = _inchiapi.NORM_ATOMS_bHasIsotopicLayer_set
    __swig_getmethods__["bHasIsotopicLayer"] = _inchiapi.NORM_ATOMS_bHasIsotopicLayer_get
    if _newclass:bHasIsotopicLayer = _swig_property(_inchiapi.NORM_ATOMS_bHasIsotopicLayer_get, _inchiapi.NORM_ATOMS_bHasIsotopicLayer_set)
    __swig_setmethods__["bTautomeric"] = _inchiapi.NORM_ATOMS_bTautomeric_set
    __swig_getmethods__["bTautomeric"] = _inchiapi.NORM_ATOMS_bTautomeric_get
    if _newclass:bTautomeric = _swig_property(_inchiapi.NORM_ATOMS_bTautomeric_get, _inchiapi.NORM_ATOMS_bTautomeric_set)
    __swig_setmethods__["bTautPreprocessed"] = _inchiapi.NORM_ATOMS_bTautPreprocessed_set
    __swig_getmethods__["bTautPreprocessed"] = _inchiapi.NORM_ATOMS_bTautPreprocessed_get
    if _newclass:bTautPreprocessed = _swig_property(_inchiapi.NORM_ATOMS_bTautPreprocessed_get, _inchiapi.NORM_ATOMS_bTautPreprocessed_set)
    __swig_setmethods__["nNumRemovedProtons"] = _inchiapi.NORM_ATOMS_nNumRemovedProtons_set
    __swig_getmethods__["nNumRemovedProtons"] = _inchiapi.NORM_ATOMS_nNumRemovedProtons_get
    if _newclass:nNumRemovedProtons = _swig_property(_inchiapi.NORM_ATOMS_nNumRemovedProtons_get, _inchiapi.NORM_ATOMS_nNumRemovedProtons_set)
    __swig_setmethods__["nNumRemovedProtonsIsotopic"] = _inchiapi.NORM_ATOMS_nNumRemovedProtonsIsotopic_set
    __swig_getmethods__["nNumRemovedProtonsIsotopic"] = _inchiapi.NORM_ATOMS_nNumRemovedProtonsIsotopic_get
    if _newclass:nNumRemovedProtonsIsotopic = _swig_property(_inchiapi.NORM_ATOMS_nNumRemovedProtonsIsotopic_get, _inchiapi.NORM_ATOMS_nNumRemovedProtonsIsotopic_set)
    __swig_setmethods__["num_iso_H"] = _inchiapi.NORM_ATOMS_num_iso_H_set
    __swig_getmethods__["num_iso_H"] = _inchiapi.NORM_ATOMS_num_iso_H_get
    if _newclass:num_iso_H = _swig_property(_inchiapi.NORM_ATOMS_num_iso_H_get, _inchiapi.NORM_ATOMS_num_iso_H_set)
    __swig_setmethods__["bTautFlags"] = _inchiapi.NORM_ATOMS_bTautFlags_set
    __swig_getmethods__["bTautFlags"] = _inchiapi.NORM_ATOMS_bTautFlags_get
    if _newclass:bTautFlags = _swig_property(_inchiapi.NORM_ATOMS_bTautFlags_get, _inchiapi.NORM_ATOMS_bTautFlags_set)
    __swig_setmethods__["bTautFlagsDone"] = _inchiapi.NORM_ATOMS_bTautFlagsDone_set
    __swig_getmethods__["bTautFlagsDone"] = _inchiapi.NORM_ATOMS_bTautFlagsDone_get
    if _newclass:bTautFlagsDone = _swig_property(_inchiapi.NORM_ATOMS_bTautFlagsDone_get, _inchiapi.NORM_ATOMS_bTautFlagsDone_set)
    __swig_setmethods__["bNormalizationFlags"] = _inchiapi.NORM_ATOMS_bNormalizationFlags_set
    __swig_getmethods__["bNormalizationFlags"] = _inchiapi.NORM_ATOMS_bNormalizationFlags_get
    if _newclass:bNormalizationFlags = _swig_property(_inchiapi.NORM_ATOMS_bNormalizationFlags_get, _inchiapi.NORM_ATOMS_bNormalizationFlags_set)
    def __init__(self): 
        this = _inchiapi.new_NORM_ATOMS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inchiapi.delete_NORM_ATOMS
    __del__ = lambda self : None;
NORM_ATOMS_swigregister = _inchiapi.NORM_ATOMS_swigregister
NORM_ATOMS_swigregister(NORM_ATOMS)

class INCHIGEN_DATA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, INCHIGEN_DATA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, INCHIGEN_DATA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pStrErrStruct"] = _inchiapi.INCHIGEN_DATA_pStrErrStruct_set
    __swig_getmethods__["pStrErrStruct"] = _inchiapi.INCHIGEN_DATA_pStrErrStruct_get
    if _newclass:pStrErrStruct = _swig_property(_inchiapi.INCHIGEN_DATA_pStrErrStruct_get, _inchiapi.INCHIGEN_DATA_pStrErrStruct_set)
    __swig_setmethods__["num_components"] = _inchiapi.INCHIGEN_DATA_num_components_set
    __swig_getmethods__["num_components"] = _inchiapi.INCHIGEN_DATA_num_components_get
    if _newclass:num_components = _swig_property(_inchiapi.INCHIGEN_DATA_num_components_get, _inchiapi.INCHIGEN_DATA_num_components_set)
    __swig_setmethods__["NormAtomsNontaut"] = _inchiapi.INCHIGEN_DATA_NormAtomsNontaut_set
    __swig_getmethods__["NormAtomsNontaut"] = _inchiapi.INCHIGEN_DATA_NormAtomsNontaut_get
    if _newclass:NormAtomsNontaut = _swig_property(_inchiapi.INCHIGEN_DATA_NormAtomsNontaut_get, _inchiapi.INCHIGEN_DATA_NormAtomsNontaut_set)
    __swig_setmethods__["NormAtomsTaut"] = _inchiapi.INCHIGEN_DATA_NormAtomsTaut_set
    __swig_getmethods__["NormAtomsTaut"] = _inchiapi.INCHIGEN_DATA_NormAtomsTaut_get
    if _newclass:NormAtomsTaut = _swig_property(_inchiapi.INCHIGEN_DATA_NormAtomsTaut_get, _inchiapi.INCHIGEN_DATA_NormAtomsTaut_set)
    def __init__(self): 
        this = _inchiapi.new_INCHIGEN_DATA()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inchiapi.delete_INCHIGEN_DATA
    __del__ = lambda self : None;
INCHIGEN_DATA_swigregister = _inchiapi.INCHIGEN_DATA_swigregister
INCHIGEN_DATA_swigregister(INCHIGEN_DATA)


def INCHIGEN_Create():
  return _inchiapi.INCHIGEN_Create()
INCHIGEN_Create = _inchiapi.INCHIGEN_Create

def STDINCHIGEN_Create():
  return _inchiapi.STDINCHIGEN_Create()
STDINCHIGEN_Create = _inchiapi.STDINCHIGEN_Create

def INCHIGEN_Setup(*args):
  return _inchiapi.INCHIGEN_Setup(*args)
INCHIGEN_Setup = _inchiapi.INCHIGEN_Setup

def STDINCHIGEN_Setup(*args):
  return _inchiapi.STDINCHIGEN_Setup(*args)
STDINCHIGEN_Setup = _inchiapi.STDINCHIGEN_Setup

def INCHIGEN_DoNormalization(*args):
  return _inchiapi.INCHIGEN_DoNormalization(*args)
INCHIGEN_DoNormalization = _inchiapi.INCHIGEN_DoNormalization

def STDINCHIGEN_DoNormalization(*args):
  return _inchiapi.STDINCHIGEN_DoNormalization(*args)
STDINCHIGEN_DoNormalization = _inchiapi.STDINCHIGEN_DoNormalization

def INCHIGEN_DoCanonicalization(*args):
  return _inchiapi.INCHIGEN_DoCanonicalization(*args)
INCHIGEN_DoCanonicalization = _inchiapi.INCHIGEN_DoCanonicalization

def STDINCHIGEN_DoCanonicalization(*args):
  return _inchiapi.STDINCHIGEN_DoCanonicalization(*args)
STDINCHIGEN_DoCanonicalization = _inchiapi.STDINCHIGEN_DoCanonicalization

def INCHIGEN_DoSerialization(*args):
  return _inchiapi.INCHIGEN_DoSerialization(*args)
INCHIGEN_DoSerialization = _inchiapi.INCHIGEN_DoSerialization

def STDINCHIGEN_DoSerialization(*args):
  return _inchiapi.STDINCHIGEN_DoSerialization(*args)
STDINCHIGEN_DoSerialization = _inchiapi.STDINCHIGEN_DoSerialization

def INCHIGEN_Reset(*args):
  return _inchiapi.INCHIGEN_Reset(*args)
INCHIGEN_Reset = _inchiapi.INCHIGEN_Reset

def STDINCHIGEN_Reset(*args):
  return _inchiapi.STDINCHIGEN_Reset(*args)
STDINCHIGEN_Reset = _inchiapi.STDINCHIGEN_Reset

def INCHIGEN_Destroy(*args):
  return _inchiapi.INCHIGEN_Destroy(*args)
INCHIGEN_Destroy = _inchiapi.INCHIGEN_Destroy

def STDINCHIGEN_Destroy(*args):
  return _inchiapi.STDINCHIGEN_Destroy(*args)
STDINCHIGEN_Destroy = _inchiapi.STDINCHIGEN_Destroy
# This file is compatible with both classic and new-style classes.


